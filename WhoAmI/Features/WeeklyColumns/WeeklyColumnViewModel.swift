import Foundation
import SwiftUI

@MainActor
class WeeklyColumnViewModel: ObservableObject {
    @Published var columns: [WeeklyColumn] = []
    @Published var selectedColumn: WeeklyColumn?
    @Published var questions: [WeeklyQuestion] = []
    @Published var isLoading = false
    @Published var error: Error?
    @Published private(set) var progress: [Int: UserWeeklyProgress] = [:]
    @Published var currentQuestionIndex = 0
    @Published var isComplete = false
    
    private let service: WeeklyColumnServiceProtocol
    private let userId: UUID
    
    init(service: WeeklyColumnServiceProtocol, userId: UUID) {
        self.service = service
        self.userId = userId
    }
    
    func fetchColumns() async {
        isLoading = true
        error = nil
        
        do {
            columns = try await service.fetchColumns()
            await fetchProgress()
        } catch {
            self.error = error
        }
        
        isLoading = false
    }
    
    private func fetchProgress() async {
        do {
            let userProgress = try await service.fetchProgress(userId: userId)
            let progressDict = Dictionary<Int, UserWeeklyProgress>(
                uniqueKeysWithValues: userProgress.map { ($0.columnId, $0) }
            )
            await MainActor.run {
                self.progress = progressDict
            }
        } catch {
            print("Error fetching progress: \(error)")
        }
    }
    
    func fetchQuestions(for columnId: Int) async throws {
        questions = try await service.fetchQuestions(for: columnId)
    }
    
    func submitResponse(_ response: String, for questionId: Int) async throws {
        let weeklyResponse = WeeklyResponse(
            id: 0, // Auto-generated by database
            userId: userId,
            questionId: questionId,
            response: response
        )
        try await service.submitResponse(weeklyResponse)
        
        if let columnId = questions[safe: currentQuestionIndex]?.columnId {
            try await service.saveProgress(
                userId: userId,
                columnId: columnId,
                lastQuestionId: questionId,
                completed: currentQuestionIndex == questions.count - 1
            )
            await fetchProgress() // Refresh progress after saving
        }
        
        if currentQuestionIndex < questions.count - 1 {
            currentQuestionIndex += 1
        } else {
            isComplete = true
        }
    }
}

private extension Array {
    subscript(safe index: Index) -> Element? {
        indices.contains(index) ? self[index] : nil
    }
}
